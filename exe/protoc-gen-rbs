#!/usr/bin/env ruby

$LOAD_PATH << File.join(__dir__, "../lib")

require "rbs_protobuf"

backend = ENV["RBS_PROTOBUF_BACKEND"]
unless backend
  STDERR.puts "ðŸš¨ðŸš¨ðŸš¨ protoc-gen-rbs requires RBS_PROTOBUF_BACKEND environment variable. ðŸš¨ðŸš¨ðŸš¨"
  STDERR.puts "  Possible options:"
  STDERR.puts "    RBS_PROTOBUF_BACKEND=protobuf         (for protobuf gem)"
  STDERR.puts "    RBS_PROTOBUF_BACKEND=google-protobuf  (for google-protobuf gem)"
  exit 1
end

filters = []

if string = ENV["RBS_PROTOBUF_FILTERS"]
  string.split(File::PATH_SEPARATOR).each do |file|
    filter = Module.new.instance_eval(File.read(file), file)

    if filter.respond_to?(:call)
      filters << filter
    else
      raise "A filter `#{file}` returns `#{filter.inspect}`, but a proc object of type `^(String rbs_name, String rbs_content, untyped proto_file) -> [String, String]` is expected"
    end
  end
end

input = Google::Protobuf::Compiler::CodeGeneratorRequest.decode(STDIN.read)

translator = case backend
             when "protobuf"
               upcase_enum = ENV.key?("PB_UPCASE_ENUMS")
               no_nested_namespace = ENV.key?("RBS_PROTOBUF_NO_NESTED_NAMESPACE")
               extension = case ENV["RBS_PROTOBUF_EXTENSION"]
                           when "false"
                             false
                           when nil
                             nil
                           when "print"
                             :print
                           else
                             true
                           end

               accept_nil_writer = ENV.key?("RBS_PROTOBUF_ACCEPT_NIL_ATTR_WRITER")

               RBSProtobuf::Translator::ProtobufGem.new(
                 input,
                 filters,
                 upcase_enum: upcase_enum,
                 nested_namespace: !no_nested_namespace,
                 extension: extension,
                 accept_nil_writer: accept_nil_writer
               )
             when "google-protobuf"
               no_nested_namespace = ENV.key?("RBS_PROTOBUF_NO_NESTED_NAMESPACE")
               RBSProtobuf::Translator::GoogleProtobufGem.new(
                 input,
                 filters,
                 nested_namespace: !no_nested_namespace,
               )
             end

if level = ENV["RBS_PROTOBUF_CONCAT_LEVEL"]
  translator.rbs_concat_level = level.to_i
end
translator.generate_rbs!

response = translator.response
print Google::Protobuf::Compiler::CodeGeneratorResponse.encode(response)
